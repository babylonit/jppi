---
interface Props {
  title: string;
  subtitle?: string;
  stats?: {
    icon: string;
    value: string;
    label: string;
  }[];
  ctaText?: string;
  ctaLink?: string;
  secondaryCtaText?: string;
  secondaryCtaLink?: string;
  backgroundImage?: string;
  overlayOpacity?: string;
}

const {
  title,
  subtitle,
  ctaText = "Get a Quote",
  ctaLink = "/contact",
  secondaryCtaText,
  secondaryCtaLink,
  backgroundImage = "/images/hero-bg.jpg",
  stats,
  overlayOpacity = "60"
} = Astro.props;
---

<section class="relative bg-gray-900 text-white overflow-hidden min-h-[85vh] flex items-center">
  <!-- Background image with overlay -->
  <div class="absolute inset-0 z-0">
    <img 
      src={backgroundImage} 
      alt="" 
      class="w-full h-full object-cover scale-105 animate-slow-zoom"
      fetchpriority="high"
    />
    <div class="absolute inset-0 bg-gradient-to-r from-black/90 to-black/40"></div>
  </div>
  
  <!-- Content -->
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="grid lg:grid-cols-2 gap-12 items-center">
      <div class="py-12 md:py-16 lg:py-20">
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight mb-6 fade-in leading-tight">
          {title}
        </h1>
      
        {subtitle && (
          <p class="text-xl md:text-2xl text-gray-200 mb-8 max-w-2xl slide-up leading-relaxed">
            {subtitle}
          </p>
        )}
      
        <div class="flex flex-wrap gap-4 mt-8 slide-up">
          <a 
            href={ctaLink} 
            class="btn bg-primary-500 hover:bg-primary-600 text-white shadow-lg group relative overflow-hidden"
          >
            <span class="relative z-10">{ctaText}</span>
            <div class="absolute inset-0 bg-white/20 transform -translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
          </a>
        
          {secondaryCtaText && secondaryCtaLink && (
            <a 
              href={secondaryCtaLink} 
              class="btn bg-white/10 hover:secondary-500 text-white border border-white/30 group relative overflow-hidden hover:text-primary-700"
            >
              <span class="relative z-10">{secondaryCtaText}</span>
              <div class="absolute inset-0 bg-white/100 transform -translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
            </a>
          )}
        </div>

        {stats && (
          <div class="grid grid-cols-3 gap-6 mt-12 pt-8 border-t border-white/20 max-w-xl">
            {stats.map(stat => (
              <div class="text-left">
                <div class="w-12 h-12 bg-white/10 rounded-lg flex items-center justify-center mb-3">
                  <i class={`${stat.icon} text-2xl text-primary-400`}></i>
                </div>
                <div class="text-3xl font-bold text-white mb-1">{stat.value}</div>
                <div class="text-sm text-gray-300">{stat.label}</div>
              </div>
            ))}
          </div>
        )}
      </div>

      <!-- Decorative Elements -->
      <div class="relative hidden lg:block">
        <div class="absolute -top-20 -right-20 w-64 h-64 bg-primary-500/20 rounded-full blur-3xl"></div>
        <div class="absolute -bottom-10 -left-10 w-48 h-48 bg-primary-600/20 rounded-full blur-2xl"></div>
        <div class="absolute inset-0 bg-gradient-to-l from-black/30 to-transparent"></div>
      </div>
    </div>
  </div>

  <!-- Mobile-specific styles -->
  <style>
    @media (max-width: 768px) {
      .container {
        padding-top: 2rem;
        padding-bottom: 2rem;
      }
      
      h1 {
        font-size: 2.5rem;
        line-height: 1.2;
      }
      
      .grid-cols-3 {
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
      }
      
      .text-3xl {
        font-size: 1.5rem;
      }
      
      .text-sm {
        font-size: 0.75rem;
      }
    }
  </style>
</section>

<style>
@keyframes slow-zoom {
  from { transform: scale(1); }
  to { transform: scale(1.1); }
}

.animate-slow-zoom {
  animation: slow-zoom 20s linear infinite alternate;
}
</style>